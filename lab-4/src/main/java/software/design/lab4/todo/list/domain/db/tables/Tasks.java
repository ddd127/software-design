/*
 * This file is generated by jOOQ.
 */
package software.design.lab4.todo.list.domain.db.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function7;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import software.design.lab4.todo.list.domain.db.Indexes;
import software.design.lab4.todo.list.domain.db.Keys;
import software.design.lab4.todo.list.domain.db.Public;
import software.design.lab4.todo.list.domain.db.enums.TaskStatusEnum;
import software.design.lab4.todo.list.domain.db.tables.records.TasksRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Tasks extends TableImpl<TasksRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.tasks</code>
     */
    public static final Tasks TASKS = new Tasks();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TasksRecord> getRecordType() {
        return TasksRecord.class;
    }

    /**
     * The column <code>public.tasks.id</code>.
     */
    public final TableField<TasksRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.tasks.list_id</code>.
     */
    public final TableField<TasksRecord, Long> LIST_ID = createField(DSL.name("list_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.tasks.status</code>.
     */
    public final TableField<TasksRecord, TaskStatusEnum> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(software.design.lab4.todo.list.domain.db.enums.TaskStatusEnum.class), this, "");

    /**
     * The column <code>public.tasks.title</code>.
     */
    public final TableField<TasksRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>public.tasks.description</code>.
     */
    public final TableField<TasksRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(2048), this, "");

    /**
     * The column <code>public.tasks.created_ts</code>.
     */
    public final TableField<TasksRecord, LocalDateTime> CREATED_TS = createField(DSL.name("created_ts"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.tasks.updated_ts</code>.
     */
    public final TableField<TasksRecord, LocalDateTime> UPDATED_TS = createField(DSL.name("updated_ts"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "");

    private Tasks(Name alias, Table<TasksRecord> aliased) {
        this(alias, aliased, null);
    }

    private Tasks(Name alias, Table<TasksRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.tasks</code> table reference
     */
    public Tasks(String alias) {
        this(DSL.name(alias), TASKS);
    }

    /**
     * Create an aliased <code>public.tasks</code> table reference
     */
    public Tasks(Name alias) {
        this(alias, TASKS);
    }

    /**
     * Create a <code>public.tasks</code> table reference
     */
    public Tasks() {
        this(DSL.name("tasks"), null);
    }

    public <O extends Record> Tasks(Table<O> child, ForeignKey<O, TasksRecord> key) {
        super(child, key, TASKS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX__TASKS__LIST_ID);
    }

    @Override
    public Identity<TasksRecord, Long> getIdentity() {
        return (Identity<TasksRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<TasksRecord> getPrimaryKey() {
        return Keys.PK__TASKS;
    }

    @Override
    public List<ForeignKey<TasksRecord, ?>> getReferences() {
        return Arrays.asList(Keys.TASKS__FK__TASKS__LIST_ID);
    }

    private transient TodoLists _todoLists;

    /**
     * Get the implicit join path to the <code>public.todo_lists</code> table.
     */
    public TodoLists todoLists() {
        if (_todoLists == null)
            _todoLists = new TodoLists(this, Keys.TASKS__FK__TASKS__LIST_ID);

        return _todoLists;
    }

    @Override
    public Tasks as(String alias) {
        return new Tasks(DSL.name(alias), this);
    }

    @Override
    public Tasks as(Name alias) {
        return new Tasks(alias, this);
    }

    @Override
    public Tasks as(Table<?> alias) {
        return new Tasks(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Tasks rename(String name) {
        return new Tasks(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Tasks rename(Name name) {
        return new Tasks(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Tasks rename(Table<?> name) {
        return new Tasks(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, Long, TaskStatusEnum, String, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function7<? super Long, ? super Long, ? super TaskStatusEnum, ? super String, ? super String, ? super LocalDateTime, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function7<? super Long, ? super Long, ? super TaskStatusEnum, ? super String, ? super String, ? super LocalDateTime, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
